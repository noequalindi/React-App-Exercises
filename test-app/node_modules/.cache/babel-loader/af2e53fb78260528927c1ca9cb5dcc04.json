{"ast":null,"code":"var _jsxFileName = \"/home/nqualindi/Desktop/REACT/React-App-Exercises/test-app/src/components/ContactDetails.js\";\nimport React, { Component } from 'react';\nimport 'flexboxgrid';\nimport { Card, ListGroup, ListGroupItem } from 'react-bootstrap';\nexport default class ContactDetails extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderDataRow = (title, value, type) => {\n      if (value) {\n        if ('Address' !== title) {\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, title), React.createElement(ListGroupItem, {\n            className: \"userName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, 'Birthdate' === title && this.renderBirthdate(value), 'Birthdate' !== title && value, type && React.createElement(\"span\", {\n            className: \"subTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          }, type)));\n        } else {\n          return React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"title\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, title), React.createElement(ListGroupItem, {\n            className: \"userName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, \"\".concat(value.street, \", \").concat(value.city, \", \").concat(value.state, \" \").concat(value.zipCode, \", \").concat(value.country)));\n        }\n      }\n    };\n  }\n\n  goBack() {\n    if (this.props.goBack) {\n      this.props.goBack();\n    }\n  }\n\n  renderBirthdate(date) {\n    date = date.replace('-', '/');\n    let updated = new Date(date);\n    const month = updated.toLocaleString('default', {\n      month: 'long'\n    });\n    return \"\".concat(month, \" \").concat(updated.getDate(), \", \").concat(updated.getFullYear());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.props.selectedContact && React.createElement(\"div\", {\n      className: \"u-center col-lg-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"contactLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"back\",\n      onClick: () => this.goBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"< Contacts\"), this.props.selectedContact.isFavorite ? React.createElement(\"span\", {\n      className: \"favorite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : React.createElement(\"span\", {\n      className: \"noFavorite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(Card, {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Card.Img, {\n      variant: \"top\",\n      src: this.props.selectedContact.largeImageURL,\n      className: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      className: \"titleName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \" \", this.props.selectedContact.name, \" \"), React.createElement(Card.Title, {\n      className: \"subDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.props.selectedContact.companyName)), React.createElement(ListGroup, {\n      className: \"list-group-flush\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.renderDataRow('Phone', this.props.selectedContact.phone.home, 'Home'), this.renderDataRow('Phone', this.props.selectedContact.phone.mobile, 'Mobile'), this.renderDataRow('Phone', this.props.selectedContact.phone.work, 'Work'), this.renderDataRow('Address', this.props.selectedContact.address), this.renderDataRow('Birthdate', this.props.selectedContact.birthdate), this.renderDataRow('Email', this.props.selectedContact.emailAddress))))));\n  }\n\n}","map":{"version":3,"sources":["/home/nqualindi/Desktop/REACT/React-App-Exercises/test-app/src/components/ContactDetails.js"],"names":["React","Component","Card","ListGroup","ListGroupItem","ContactDetails","renderDataRow","title","value","type","renderBirthdate","street","city","state","zipCode","country","goBack","props","date","replace","updated","Date","month","toLocaleString","getDate","getFullYear","render","selectedContact","isFavorite","largeImageURL","name","companyName","phone","home","mobile","work","address","birthdate","emailAddress"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'flexboxgrid'\nimport { Card, ListGroup, ListGroupItem } from 'react-bootstrap'\nexport default class ContactDetails extends Component {\n\n    goBack() {\n        if (this.props.goBack) {\n            this.props.goBack();\n        }\n    }\n\n    renderBirthdate(date) {\n        date = date.replace('-', '/');\n        let updated = new Date(date);\n        const month = updated.toLocaleString('default', { month: 'long' });\n\n        return `${month} ${updated.getDate()}, ${updated.getFullYear()}`;\n    }\n\n    renderDataRow = (title, value, type) => {\n        if (value) {\n            if ('Address' !== title) {\n                return (\n                    <React.Fragment>\n                        <span className=\"title\">{title}</span>\n                        <ListGroupItem className=\"userName\">\n                            {\n                                'Birthdate' === title &&\n                                this.renderBirthdate(value)\n                            }\n                            {\n                                'Birthdate' !== title &&\n                                value\n                            }\n                            {\n                                type &&\n                                <span className=\"subTitle\">{type}</span>\n                            }\n                        </ListGroupItem>\n                    </React.Fragment>\n                );\n            } else {\n                return (\n                    <React.Fragment>\n                        <span className=\"title\">{title}</span>\n                        <ListGroupItem className=\"userName\">\n                            { `${value.street}, ${value.city}, ${value.state} ${value.zipCode}, ${value.country}` }\n                        </ListGroupItem>\n                    </React.Fragment>\n                )\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                { this.props.selectedContact &&\n                    <div className=\"u-center col-lg-8\">\n                        <div className=\"box\">\n                            <div className=\"contactLink\">\n                                <a className=\"back\" onClick={ () => this.goBack() }>\n                                   &lt; Contacts\n                                </a>\n                            { this.props.selectedContact.isFavorite ? <span className=\"favorite\"></span> : <span className=\"noFavorite\"></span>\n                            }\n                            </div>\n                            <Card className=\"card\">\n                                <Card.Img variant=\"top\" src={ this.props.selectedContact.largeImageURL} className=\"image\"/>\n                                <Card.Body>\n                                    <Card.Title className=\"titleName\"> { this.props.selectedContact.name } </Card.Title>\n                                    <Card.Title className=\"subDetail\">\n                                        { this.props.selectedContact.companyName }\n                                    </Card.Title>\n                                </Card.Body>\n                                <ListGroup className=\"list-group-flush\">\n\n                                    { this.renderDataRow('Phone', this.props.selectedContact.phone.home, 'Home') }\n                                    { this.renderDataRow('Phone', this.props.selectedContact.phone.mobile, 'Mobile') }\n                                    { this.renderDataRow('Phone', this.props.selectedContact.phone.work, 'Work') }\n                                    { this.renderDataRow('Address', this.props.selectedContact.address) }\n                                    { this.renderDataRow('Birthdate', this.props.selectedContact.birthdate) }\n                                    { this.renderDataRow('Email', this.props.selectedContact.emailAddress) }\n                                </ListGroup>\n                            </Card>\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}